console.log("同步模式");
console.log(1);
console.log(2);
console.log(3);

// - 代码按顺序执行,前一个任务结束后再执行下一个任务
// - 在当前任务未完成之前,其他任务被阻塞

// - 当前任务结束后,并不阻塞其他任务
// - 其他任务可在当前任务结束前执行
// - 异步任务一般通过回调函数或 Promise 等处理其结果
console.log("异步模式");

setTimeout(() => {
	console.log("回调函数setTimeout");
});
console.log(2);

// 会先打印2 后异步打印，不阻塞主线程
// 异步的实现原理:
// - 在 JavaScript 中,除主线程外还有 Job Queue(任务队列)、Event Queue(事件队列)等
// - 异步函数(定时器、ajax 请求等)会把回调函数添加到 Job Queue
// - 一旦主线程为空,会去 Job Queue 取出第一个任务执行



// - 同步模式:代码按顺序执行,前一个任务未完成时阻塞其他任务
// - 异步模式:任务结束后不阻塞其他任务,通过回调函数处理结果
// - 异步基于事件循环和任务队列实现,主线程为空时执行任务队列中的任务